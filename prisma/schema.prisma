generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContentCategories {
  category_pk    Int              @id @unique @default(autoincrement())
  category   String           @unique @db.VarChar(30)
  tag String           @unique @db.VarChar(30)
  ContentMapping  ContentMapping[]
}

model ContentMapping {
  content_map_pk Int             @id @unique @default(autoincrement())
  category        Int
  content         Int
  ContentCategory ContentCategories @relation(fields: [category], references: [category_pk], onDelete: Cascade, map: "category_pk")
  Contents        Contents        @relation(fields: [content], references: [content_pk], onDelete: Cascade, map: "content_pk")
}

model Contents {
  content_pk    Int              @id @unique @default(autoincrement())
  title  String           @db.VarChar(30)
  link   String           @db.VarChar(100)
  img    String           @db.VarChar(100)
  place          String           @db.VarChar(30)
  introduction   String           @db.VarChar(200)
  start_at       String?          @db.VarChar(10)
  end_at         String?          @db.VarChar(10)
  inquiry        String[]
  price          String[]
  benefit        String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ContentMapping ContentMapping[]
  Likes          Likes[]
}

model Likes {
  liked_pk Int      @id @unique @default(autoincrement())
  user      Int
  content   Int
  Contents  Contents @relation(fields: [content], references: [content_pk], onDelete: Cascade, map: "content_pk")
  User      Users     @relation(fields: [user], references: [user_pk], onDelete: Cascade, map: "user_pk")
}

model Users {
  user_pk     Int      @id @unique @default(autoincrement())
  name    String   @db.VarChar(30)
  age     Int
  gender  String   @db.VarChar(20)
  phone   String   @unique @db.VarChar(30)
  birth   String   @db.VarChar(30)
  sns_type     String   @db.VarChar(30)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Likes        Likes[]
}
